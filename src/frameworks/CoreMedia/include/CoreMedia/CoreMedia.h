/*
 This file is part of Darling.

 Copyright (C) 2017 Lubos Dolezel

 Darling is free software: you can redistribute it and/or modify
 it under the terms of the GNU General Public License as published by
 the Free Software Foundation, either version 3 of the License, or
 (at your option) any later version.

 Darling is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 GNU General Public License for more details.

 You should have received a copy of the GNU General Public License
 along with Darling.  If not, see <http://www.gnu.org/licenses/>.
*/


#ifndef _CoreMedia_H_
#define _CoreMedia_H_


#include <CoreMedia/CMTime.h>
#include <CoreFoundation/CFBase.h>

extern const CFStringRef kCMFormatDescriptionColorPrimaries_ITU_R_2020;
extern const CFStringRef kCMFormatDescriptionColorPrimaries_DCI_P3;
extern const CFStringRef kCMFormatDescriptionColorPrimaries_P3_D65;
extern const CFStringRef kCMFormatDescriptionExtension_ContentLightLevelInfo;
extern const CFStringRef kCMFormatDescriptionExtension_Depth;
extern const CFStringRef kCMFormatDescriptionExtension_FormatName;
extern const CFStringRef kCMFormatDescriptionExtension_FullRangeVideo;
extern const CFStringRef kCMFormatDescriptionExtension_MasteringDisplayColorVolume;
extern const CFStringRef kCMFormatDescriptionTransferFunction_ITU_R_2020;
extern const CFStringRef kCMFormatDescriptionTransferFunction_ITU_R_2100_HLG;
extern const CFStringRef kCMFormatDescriptionTransferFunction_SMPTE_ST_2084_PQ;
extern const CFStringRef kCMFormatDescriptionTransferFunction_SMPTE_ST_428_1;
extern const CFStringRef kCMFormatDescriptionYCbCrMatrix_ITU_R_2020;
extern const CFStringRef kCMSampleAttachmentKey_IsDependedOnByOthers;

void* AudioToolbox_AudioConverterDispose(void);
void* AudioToolbox_AudioConverterGetProperty(void);
void* AudioToolbox_AudioConverterNew(void);
void* AudioToolbox_AudioConverterSetProperty(void);
void* AudioToolbox_AudioFormatGetProperty(void);
void* AudioToolbox_AudioFormatGetPropertyInfo(void);
void* CM8021ASClockAddAWDLPort(void);
void* CM8021ASClockAddIPv4Port(void);
void* CM8021ASClockAddIPv6Port(void);
void* CM8021ASClockCopySystemClockIdentifier(void);
void* CM8021ASClockCreate(void);
void* CM8021ASClockGetClockTimeForHostTime(void);
void* CM8021ASClockGetHostTimeForClockTime(void);
void* CM8021ASClockGetTypeID(void);
void* CM8021ASClockIsLocked(void);
void* CM8021ASClockRemoveAWDLPort(void);
void* CM8021ASClockRemoveIPv4Port(void);
void* CM8021ASClockRemoveIPv6Port(void);
void* CM8021ASClockSetAllPortRemoteSyncMessageIntervals(void);
void* CMAudioDeviceClockCreate(void);
void* CMAudioDeviceClockCreateFromAudioDeviceID(void);
void* CMAudioDeviceClockGetAudioDevice(void);
void* CMAudioDeviceClockSetAudioDeviceID(void);
void* CMAudioDeviceClockSetAudioDeviceUID(void);
void* CMAudioFormatDescriptionCopyAsBigEndianSoundDescriptionBlockBuffer(void);
void* CMAudioFormatDescriptionCreate(void);
void* CMAudioFormatDescriptionCreateFromBigEndianSoundDescriptionBlockBuffer(void);
void* CMAudioFormatDescriptionCreateFromBigEndianSoundDescriptionData(void);
void* CMAudioFormatDescriptionCreateSummary(void);
void* CMAudioFormatDescriptionEqual(void);
void* CMAudioFormatDescriptionGetChannelCount(void);
void* CMAudioFormatDescriptionGetChannelLayout(void);
void* CMAudioFormatDescriptionGetFormatList(void);
void* CMAudioFormatDescriptionGetMagicCookie(void);
void* CMAudioFormatDescriptionGetMostCompatibleFormat(void);
void* CMAudioFormatDescriptionGetRichestDecodableFormat(void);
void* CMAudioFormatDescriptionGetStreamBasicDescription(void);
void* CMAudioSampleBufferCreateReadyWithPacketDescriptions(void);
void* CMAudioSampleBufferCreateWithPacketDescriptions(void);
void* CMBaseClassGetCFTypeID(void);
void* CMBaseGetClassID(void);
void* CMBaseObjectGetClassID(void);
void* CMBaseObjectGetDerivedStorage(void);
void* CMBaseObjectGetProtocolVTable(void);
void* CMBaseObjectGetVTable(void);
void* CMBaseObjectImplementsProtocol(void);
void* CMBaseObjectIsMemberOfClass(void);
void* CMBaseProtocolCopyDebugDescription(void);
void* CMBlockBufferAccessDataBytes(void);
void* CMBlockBufferAppendBufferReference(void);
void* CMBlockBufferAppendMemoryBlock(void);
void* CMBlockBufferAssureBlockMemory(void);
void* CMBlockBufferCopyDataBytes(void);
void* CMBlockBufferCreateContiguous(void);
void* CMBlockBufferCreateEmpty(void);
void* CMBlockBufferCreateWithBufferReference(void);
void* CMBlockBufferCreateWithMemoryBlock(void);
void* CMBlockBufferFillDataBytes(void);
void* CMBlockBufferGetDataLength(void);
void* CMBlockBufferGetDataPointer(void);
void* CMBlockBufferGetTypeID(void);
void* CMBlockBufferIsEmpty(void);
void* CMBlockBufferIsRangeContiguous(void);
void* CMBlockBufferReplaceDataBytes(void);
void* CMBufferQueueCallForEachBuffer(void);
void* CMBufferQueueContainsEndOfData(void);
void* CMBufferQueueCreate(void);
void* CMBufferQueueDequeueAndRetain(void);
void* CMBufferQueueDequeueIfDataReadyAndRetain(void);
void* CMBufferQueueEnqueue(void);
void* CMBufferQueueGetBufferCount(void);
void* CMBufferQueueGetCallbacksForSampleBuffersSortedByOutputPTS(void);
void* CMBufferQueueGetCallbacksForUnsortedSampleBuffers(void);
void* CMBufferQueueGetDuration(void);
void* CMBufferQueueGetEndPresentationTimeStamp(void);
void* CMBufferQueueGetFirstDecodeTimeStamp(void);
void* CMBufferQueueGetFirstPresentationTimeStamp(void);
void* CMBufferQueueGetHead(void);
void* CMBufferQueueGetMaxPresentationTimeStamp(void);
void* CMBufferQueueGetMinDecodeTimeStamp(void);
void* CMBufferQueueGetMinPresentationTimeStamp(void);
void* CMBufferQueueGetTotalSize(void);
void* CMBufferQueueGetTypeID(void);
void* CMBufferQueueInstallTrigger(void);
void* CMBufferQueueInstallTriggerWithIntegerThreshold(void);
void* CMBufferQueueIsAtEndOfData(void);
void* CMBufferQueueIsEmpty(void);
void* CMBufferQueueMarkEndOfData(void);
void* CMBufferQueueRemoveTrigger(void);
void* CMBufferQueueReset(void);
void* CMBufferQueueResetWithCallback(void);
void* CMBufferQueueSetValidationCallback(void);
void* CMBufferQueueTestTrigger(void);
void* CMByteStreamAppend(void);
void* CMByteStreamAppendBlockBuffer(void);
void* CMByteStreamBaseGetTypeID(void);
void* CMByteStreamCreateCompositeForRead(void);
void* CMByteStreamCreateForBlockBuffer(void);
void* CMByteStreamCreateForFileURL(void);
void* CMByteStreamCreateWritableForBlockBuffer(void);
void* CMByteStreamGetCMBaseObject(void);
void* CMByteStreamGetClassID(void);
void* CMByteStreamWriteBlockBuffer(void);
void* CMClockConvertHostTimeToSystemUnits(void);
void* CMClockGetAnchorTime(void);
void* CMClockGetHostTimeClock(void);
void* CMClockGetTime(void);
void* CMClockGetTypeID(void);
void* CMClockInvalidate(void);
void* CMClockMakeHostTimeFromSystemUnits(void);
void* CMClockMightDrift(void);
void* CMClosedCaptionFormatDescriptionCopyAsBigEndianClosedCaptionDescriptionBlockBuffer(void);
void* CMClosedCaptionFormatDescriptionCreateFromBigEndianClosedCaptionDescriptionBlockBuffer(void);
void* CMClosedCaptionFormatDescriptionCreateFromBigEndianClosedCaptionDescriptionData(void);
void* CMCopyDictionaryOfAttachments(void);
void* CMCreateContiguousBlockBufferFromStream(void);
void* CMDerivedObjectCreate(void);
void* CMDoesBigEndianSoundDescriptionRequireLegacyCBRSampleTableLayout(void);
void* CMFormatDescriptionCreate(void);
void* CMFormatDescriptionEqual(void);
void* CMFormatDescriptionEqualIgnoringExtensionKeys(void);
void* CMFormatDescriptionGetExtension(void);
void* CMFormatDescriptionGetExtensions(void);
void* CMFormatDescriptionGetMediaSubType(void);
void* CMFormatDescriptionGetMediaType(void);
void* CMFormatDescriptionGetTypeID(void);
void* CMFormatDescriptionGetWidestColorPropertiesFromFormatDescriptions(void);
void* CMGetAttachment(void);
void* CMHapticFormatDescriptionCopyAsBigEndianHapticDescriptionBlockBuffer(void);
void* CMHapticFormatDescriptionCreateFromBigEndianHapticDescriptionBlockBuffer(void);
void* CMHapticFormatDescriptionCreateFromBigEndianHapticDescriptionData(void);
void* CMMemoryPoolCreate(void);
void* CMMemoryPoolFlush(void);
void* CMMemoryPoolGetAllocator(void);
void* CMMemoryPoolGetTypeID(void);
void* CMMemoryPoolInvalidate(void);
void* CMMetadataCreateIdentifierForKeyAndKeySpace(void);
void* CMMetadataCreateKeyFromIdentifier(void);
void* CMMetadataCreateKeyFromIdentifierAsCFData(void);
void* CMMetadataCreateKeySpaceFromIdentifier(void);
void* CMMetadataDataTypeRegistryDataTypeConformsToDataType(void);
void* CMMetadataDataTypeRegistryDataTypeIsBaseDataType(void);
void* CMMetadataDataTypeRegistryDataTypeIsRegistered(void);
void* CMMetadataDataTypeRegistryGetBaseDataTypeForConformingDataType(void);
void* CMMetadataDataTypeRegistryGetBaseDataTypes(void);
void* CMMetadataDataTypeRegistryGetConformingDataTypes(void);
void* CMMetadataDataTypeRegistryGetDataTypeDescription(void);
void* CMMetadataDataTypeRegistryRegisterDataType(void);
void* CMMetadataFormatDescriptionCopyAsBigEndianMetadataDescriptionBlockBuffer(void);
void* CMMetadataFormatDescriptionCreateByMergingMetadataFormatDescriptions(void);
void* CMMetadataFormatDescriptionCreateFromBigEndianMetadataDescriptionBlockBuffer(void);
void* CMMetadataFormatDescriptionCreateFromBigEndianMetadataDescriptionData(void);
void* CMMetadataFormatDescriptionCreateWithKeys(void);
void* CMMetadataFormatDescriptionCreateWithMetadataFormatDescriptionAndMetadataSpecifications(void);
void* CMMetadataFormatDescriptionCreateWithMetadataSpecifications(void);
void* CMMetadataFormatDescriptionGetIdentifiers(void);
void* CMMetadataFormatDescriptionGetKeyWithLocalID(void);
void* CMMuxedFormatDescriptionCreate(void);
void* CMNotificationCenterAddListener(void);
void* CMNotificationCenterBarrier(void);
void* CMNotificationCenterCreate(void);
void* CMNotificationCenterGetDefaultLocalCenter(void);
void* CMNotificationCenterGetTypeID(void);
void* CMNotificationCenterPostNotification(void);
void* CMNotificationCenterRegisterForBarrierSupport(void);
void* CMNotificationCenterRemoveListener(void);
void* CMNotificationCenterUnregisterForBarrierSupport(void);
void* CMPropagateAttachments(void);
void* CMRemoveAllAttachments(void);
void* CMRemoveAttachment(void);
void* CMSampleBufferCallBlockForEachSample(void);
void* CMSampleBufferCallForEachSample(void);
void* CMSampleBufferCopyPCMDataIntoAudioBufferList(void);
void* CMSampleBufferCopySampleBufferForRange(void);
void* CMSampleBufferCreate(void);
void* CMSampleBufferCreateCopy(void);
void* CMSampleBufferCreateCopyWithNewTiming(void);
void* CMSampleBufferCreateForImageBuffer(void);
void* CMSampleBufferCreateReady(void);
void* CMSampleBufferCreateReadyWithImageBuffer(void);
void* CMSampleBufferDataIsReady(void);
void* CMSampleBufferGetAudioBufferListWithRetainedBlockBuffer(void);
void* CMSampleBufferGetAudioStreamPacketDescriptions(void);
void* CMSampleBufferGetAudioStreamPacketDescriptionsPtr(void);
void* CMSampleBufferGetDataBuffer(void);
void* CMSampleBufferGetDecodeTimeStamp(void);
void* CMSampleBufferGetDuration(void);
void* CMSampleBufferGetFormatDescription(void);
void* CMSampleBufferGetImageBuffer(void);
void* CMSampleBufferGetNumSamples(void);
void* CMSampleBufferGetOutputDecodeTimeStamp(void);
void* CMSampleBufferGetOutputDuration(void);
void* CMSampleBufferGetOutputPresentationTimeStamp(void);
void* CMSampleBufferGetOutputSampleTimingInfoArray(void);
void* CMSampleBufferGetPresentationTimeStamp(void);
void* CMSampleBufferGetSampleAttachmentsArray(void);
void* CMSampleBufferGetSampleSize(void);
void* CMSampleBufferGetSampleSizeArray(void);
void* CMSampleBufferGetSampleTimingInfo(void);
void* CMSampleBufferGetSampleTimingInfoArray(void);
void* CMSampleBufferGetTotalSampleSize(void);
void* CMSampleBufferGetTypeID(void);
void* CMSampleBufferHasDataFailed(void);
void* CMSampleBufferInvalidate(void);
void* CMSampleBufferIsValid(void);
void* CMSampleBufferMakeDataReady(void);
void* CMSampleBufferSetDataBuffer(void);
void* CMSampleBufferSetDataBufferFromAudioBufferList(void);
void* CMSampleBufferSetDataFailed(void);
void* CMSampleBufferSetDataReady(void);
void* CMSampleBufferSetInvalidateCallback(void);
void* CMSampleBufferSetInvalidateHandler(void);
void* CMSampleBufferSetOutputPresentationTimeStamp(void);
void* CMSampleBufferTrackDataReadiness(void);
void* CMSetAttachment(void);
void* CMSetAttachments(void);
void* CMSimpleQueueCreate(void);
void* CMSimpleQueueDequeue(void);
void* CMSimpleQueueEnqueue(void);
void* CMSimpleQueueGetCapacity(void);
void* CMSimpleQueueGetCount(void);
void* CMSimpleQueueGetHead(void);
void* CMSimpleQueueGetTypeID(void);
void* CMSimpleQueueReset(void);
void* CMSwapBigEndianClosedCaptionDescriptionToHost(void);
void* CMSwapBigEndianHapticDescriptionToHost(void);
void* CMSwapBigEndianImageDescriptionToHost(void);
void* CMSwapBigEndianMetadataDescriptionToHost(void);
void* CMSwapBigEndianSoundDescriptionToHost(void);
void* CMSwapBigEndianTextDescriptionToHost(void);
void* CMSwapBigEndianTimeCodeDescriptionToHost(void);
void* CMSwapHostEndianClosedCaptionDescriptionToBig(void);
void* CMSwapHostEndianHapticDescriptionToBig(void);
void* CMSwapHostEndianImageDescriptionToBig(void);
void* CMSwapHostEndianMetadataDescriptionToBig(void);
void* CMSwapHostEndianSoundDescriptionToBig(void);
void* CMSwapHostEndianTextDescriptionToBig(void);
void* CMSwapHostEndianTimeCodeDescriptionToBig(void);
void* CMSyncConvertTime(void);
void* CMSyncGetRelativeRate(void);
void* CMSyncGetRelativeRateAndAnchorTime(void);
void* CMSyncGetTime(void);
void* CMSyncMightDrift(void);
void* CMTextFormatDescriptionCopyAsBigEndianTextDescriptionBlockBuffer(void);
void* CMTextFormatDescriptionCreateFromBigEndianTextDescriptionBlockBuffer(void);
void* CMTextFormatDescriptionCreateFromBigEndianTextDescriptionData(void);
void* CMTextFormatDescriptionGetDefaultStyle(void);
void* CMTextFormatDescriptionGetDefaultTextBox(void);
void* CMTextFormatDescriptionGetDisplayFlags(void);
void* CMTextFormatDescriptionGetFontName(void);
void* CMTextFormatDescriptionGetJustification(void);
void* CMTimeAbsoluteValue(void);
void* CMTimeAdd(void);
void* CMTimeClampToRange(void);
void* CMTimeCodeFormatDescriptionCopyAsBigEndianTimeCodeDescriptionBlockBuffer(void);
void* CMTimeCodeFormatDescriptionCreate(void);
void* CMTimeCodeFormatDescriptionCreateFromBigEndianTimeCodeDescriptionBlockBuffer(void);
void* CMTimeCodeFormatDescriptionCreateFromBigEndianTimeCodeDescriptionData(void);
void* CMTimeCodeFormatDescriptionGetFrameDuration(void);
void* CMTimeCodeFormatDescriptionGetFrameQuanta(void);
void* CMTimeCodeFormatDescriptionGetTimeCodeFlags(void);
void* CMTimeCompare(void);
void* CMTimeConvertScale(void);
void* CMTimeCopyAsCVBufferTimeDictionary(void);
void* CMTimeCopyAsDictionary(void);
void* CMTimeCopyDescription(void);
void* CMTimeGetSeconds(void);
void* CMTimeMake(void);
void* CMTimeMakeFromCVBufferTimeDictionary(void);
void* CMTimeMakeFromDictionary(void);
void* CMTimeMakeWithEpoch(void);
void* CMTimeMakeWithSeconds(void);
void* CMTimeMapDurationFromRangeToRange(void);
void* CMTimeMapTimeFromRangeToRange(void);
void* CMTimeMappingCopyAsDictionary(void);
void* CMTimeMappingCopyDescription(void);
void* CMTimeMappingMake(void);
void* CMTimeMappingMakeEmpty(void);
void* CMTimeMappingMakeFromDictionary(void);
void* CMTimeMappingShow(void);
void* CMTimeMaximum(void);
void* CMTimeMinimum(void);
void* CMTimeMultiply(void);
void* CMTimeMultiplyByFloat64(void);
void* CMTimeMultiplyByRatio(void);
void* CMTimeRangeContainsTime(void);
void* CMTimeRangeContainsTimeRange(void);
void* CMTimeRangeCopyAsDictionary(void);
void* CMTimeRangeCopyDescription(void);
void* CMTimeRangeEqual(void);
void* CMTimeRangeFromTimeToTime(void);
void* CMTimeRangeGetEnd(void);
void* CMTimeRangeGetIntersection(void);
void* CMTimeRangeGetUnion(void);
void* CMTimeRangeMake(void);
void* CMTimeRangeMakeFromDictionary(void);
void* CMTimeRangeShow(void);
void* CMTimeShow(void);
void* CMTimeSubtract(void);
void* CMTimeSyncClockCreateForSystemDomainClockIdentifier(void);
void* CMTimebaseAddTimer(void);
void* CMTimebaseAddTimerDispatchSource(void);
void* CMTimebaseCopyMaster(void);
void* CMTimebaseCopyMasterClock(void);
void* CMTimebaseCopyMasterTimebase(void);
void* CMTimebaseCopyUltimateMasterClock(void);
void* CMTimebaseCreateReadOnlyTimebase(void);
void* CMTimebaseCreateWithMasterClock(void);
void* CMTimebaseCreateWithMasterTimebase(void);
void* CMTimebaseGetEffectiveRate(void);
void* CMTimebaseGetMaster(void);
void* CMTimebaseGetMasterClock(void);
void* CMTimebaseGetMasterTimebase(void);
void* CMTimebaseGetRate(void);
void* CMTimebaseGetTime(void);
void* CMTimebaseGetTimeAndRate(void);
void* CMTimebaseGetTimeClampedAboveAnchorTime(void);
void* CMTimebaseGetTimeWithTimeScale(void);
void* CMTimebaseGetTypeID(void);
void* CMTimebaseGetUltimateMasterClock(void);
void* CMTimebaseNotificationBarrier(void);
void* CMTimebaseRemoveTimer(void);
void* CMTimebaseRemoveTimerDispatchSource(void);
void* CMTimebaseSetAnchorTime(void);
void* CMTimebaseSetMasterClock(void);
void* CMTimebaseSetMasterTimebase(void);
void* CMTimebaseSetRate(void);
void* CMTimebaseSetRateAndAnchorTime(void);
void* CMTimebaseSetRateAndAnchorTimeWithFlags(void);
void* CMTimebaseSetTime(void);
void* CMTimebaseSetTimerDispatchSourceNextFireTime(void);
void* CMTimebaseSetTimerDispatchSourceToFireImmediately(void);
void* CMTimebaseSetTimerNextFireTime(void);
void* CMTimebaseSetTimerToFireImmediately(void);
void* CMVideoFormatDescriptionCopyAsBigEndianImageDescriptionBlockBuffer(void);
void* CMVideoFormatDescriptionCreate(void);
void* CMVideoFormatDescriptionCreateForImageBuffer(void);
void* CMVideoFormatDescriptionCreateFromBigEndianImageDescriptionBlockBuffer(void);
void* CMVideoFormatDescriptionCreateFromBigEndianImageDescriptionData(void);
void* CMVideoFormatDescriptionCreateFromH264ParameterSets(void);
void* CMVideoFormatDescriptionCreateFromHEVCParameterSets(void);
void* CMVideoFormatDescriptionGetCleanAperture(void);
void* CMVideoFormatDescriptionGetDimensions(void);
void* CMVideoFormatDescriptionGetExtensionKeysCommonWithImageBuffers(void);
void* CMVideoFormatDescriptionGetH264ParameterSetAtIndex(void);
void* CMVideoFormatDescriptionGetHEVCParameterSetAtIndex(void);
void* CMVideoFormatDescriptionGetPresentationDimensions(void);
void* CMVideoFormatDescriptionGetVideoDynamicRange(void);
void* CMVideoFormatDescriptionMatchesImageBuffer(void);
void* ColorsWheelContext_RotateRad(void);
void* ColorsWheelContext_computeColorComponent(void);
void* ColorsWheelContext_computeColorComponentWheel(void);
void* ColorsWheelContext_countColorsTransitions(void);
void* ColorsWheelContext_create(void);
void* ColorsWheelContext_destroy(void);
void* ColorsWheelContext_drawColorsWheel(void);
void* ColorsWheelContext_drawMatrix_f16(void);
void* ColorsWheelContext_drawMatrix_f32(void);
void* ColorsWheelContext_drawMatrix_u8(void);
void* ColorsWheelContext_firstTransitionIndex(void);
void* ColorsWheelContext_isTransitionInverted(void);
void* FigAtomStreamAdvanceToNextAtom(void);
void* FigAtomStreamAdvanceToNextAtomWithType(void);
void* FigAtomStreamAdvanceViaAtomPath(void);
void* FigAtomStreamGetCurrentAtomDataGlobalOffset(void);
void* FigAtomStreamGetCurrentAtomGlobalOffset(void);
void* FigAtomStreamGetCurrentAtomHeaderSize(void);
void* FigAtomStreamGetCurrentAtomOffsetInParent(void);
void* FigAtomStreamGetCurrentAtomTypeAndDataLength(void);
void* FigAtomStreamGetCurrentAtomUUIDType(void);
void* FigAtomStreamGetCurrentAtomVersionAndFlags(void);
void* FigAtomStreamInitWithBBuf(void);
void* FigAtomStreamInitWithByteStream(void);
void* FigAtomStreamInitWithByteStreamWithSize(void);
void* FigAtomStreamInitWithMemoryBlock(void);
void* FigAtomStreamInitWithParent(void);
void* FigAtomStreamPositionAtFirstAtomWithType(void);
void* FigAtomStreamPositionViaAtomPath(void);
void* FigAtomStreamReadCurrentAtomAndCreateBBuf(void);
void* FigAtomStreamReadCurrentAtomData(void);
void* FigAtomStreamReadCurrentAtomDataAndCreateBBuf(void);
void* FigAtomUtilityGetAtomTypeAndLengthInBBuf(void);
void* FigAtomUtilityGetAtomTypeAndLengthInByteStream(void);
void* FigAtomUtilityGetAtomTypeAndLengthInByteStreamWithSize(void);
void* FigAtomWriterAppendBlockBufferData(void);
void* FigAtomWriterAppendData(void);
void* FigAtomWriterAppendVersionAndFlags(void);
void* FigAtomWriterBeginAtom(void);
void* FigAtomWriterBeginUUIDAtom(void);
void* FigAtomWriterEndAtom(void);
void* FigAtomWriterGetAtomDataSize(void);
void* FigAtomWriterGetAtomGlobalDataOffset(void);
void* FigAtomWriterGetAtomSize(void);
void* FigAtomWriterInitWithBlockBuffer(void);
void* FigAtomWriterInitWithByteStream(void);
void* FigAtomWriterInitWithParent(void);
void* FigAtomicAdd32(void);
void* FigAtomicBitAnd32(void);
void* FigAtomicBitAnd32Orig(void);
void* FigAtomicBitOr32(void);
void* FigAtomicBitOr32Orig(void);
void* FigAtomicBitXor32(void);
void* FigAtomicBitXor32Orig(void);
void* FigAtomicCompareAndSwap32(void);
void* FigAtomicCompareAndSwapPtr(void);
void* FigAtomicDecrement32(void);
void* FigAtomicIncrement32(void);
void* FigAudioDeviceClockCreate(void);
void* FigAudioDeviceClockCreateFromAudioDeviceID(void);
void* FigAudioDeviceClockGetAudioDevice(void);
void* FigAudioDeviceClockSetAudioDeviceID(void);
void* FigAudioDeviceClockSetAudioDeviceUID(void);
void* FigAudioFormatDescriptionCopyAsBigEndianSoundDescriptionBlockBuffer(void);
void* FigAudioFormatDescriptionCreateFromBigEndianSoundDescriptionBlockBuffer(void);
void* FigAudioFormatDescriptionCreateFromBigEndianSoundDescriptionData(void);
void* FigAudioFormatDescriptionGetMostCompatibleFormatAndChannelLayout(void);
void* FigAudioFormatDescriptionGetRichestDecodableFormatAndChannelLayout(void);
void* FigBBMessageCommit(void);
void* FigBBMessageCopyBlockBuffer(void);
void* FigBBMessageCopyCFArray(void);
void* FigBBMessageCopyCFData(void);
void* FigBBMessageCopyCFDictionary(void);
void* FigBBMessageCopyCFString(void);
void* FigBBMessageCreate(void);
void* FigBBMessageGetCString(void);
void* FigBBMessageGetDataPtr(void);
void* FigBBMessageGetFloat32(void);
void* FigBBMessageGetInt64(void);
void* FigBBMessageSetBlockBuffer(void);
void* FigBBMessageSetCFArray(void);
void* FigBBMessageSetCFData(void);
void* FigBBMessageSetCFDictionary(void);
void* FigBBMessageSetCFString(void);
void* FigBBMessageSetCString(void);
void* FigBBMessageSetDataPtr(void);
void* FigBBMessageSetFloat32(void);
void* FigBBMessageSetInt64(void);
void* FigBaseClassGetCFTypeID(void);
void* FigBaseClassRegisterClass(void);
void* FigBaseGetClassID(void);
void* FigBaseObjectCopyDebugDescription(void);
void* FigBaseObjectEqual(void);
void* FigBaseObjectFinalize(void);
void* FigBaseObjectGetClassID(void);
void* FigBaseObjectGetDerivedStorage(void);
void* FigBaseObjectGetVTable(void);
void* FigBaseObjectInit(void);
void* FigBaseObjectIsMemberOfClass(void);
void* FigBaseObjectStandardNotificationBarrier(void);
void* FigBaseProtocolRegisterProtocol(void);
void* FigBlockBufferCompare(void);
void* FigBlockBufferGetDataPointerAndOrigin(void);
void* FigBlockBufferHexDump(void);
void* FigBlockBufferHexDumpWithEmitter(void);
void* FigBlockBufferRelease(void);
void* FigBlockBufferRetain(void);
void* FigBoxedMetadataAppendCFTypedValue(void);
void* FigBoxedMetadataAppendCGAffineTransform(void);
void* FigBoxedMetadataAppendCGPoint(void);
void* FigBoxedMetadataAppendCGRect(void);
void* FigBoxedMetadataAppendCGSize(void);
void* FigBoxedMetadataAppendFloat32(void);
void* FigBoxedMetadataAppendFloat64(void);
void* FigBoxedMetadataAppendSInt16(void);
void* FigBoxedMetadataAppendSInt32(void);
void* FigBoxedMetadataAppendSInt64(void);
void* FigBoxedMetadataAppendSInt8(void);
void* FigBoxedMetadataAppendUInt16(void);
void* FigBoxedMetadataAppendUInt32(void);
void* FigBoxedMetadataAppendUInt64(void);
void* FigBoxedMetadataAppendUInt8(void);
void* FigBoxedMetadataAppendValue(void);
void* FigBoxedMetadataCopyValueOfItemAtIndexAsCFType(void);
void* FigBoxedMetadataCreateBlockBufferForIndex(void);
void* FigBoxedMetadataCreateForConstruction(void);
void* FigBoxedMetadataCreateFromBlockBuffer(void);
void* FigBoxedMetadataEndConstruction(void);
void* FigBoxedMetadataGetBlockBuffer(void);
void* FigBoxedMetadataGetFormatDescription(void);
void* FigBoxedMetadataGetLocalIDOfItemAtIndex(void);
void* FigBoxedMetadataGetNumberOfItems(void);
void* FigBoxedMetadataGetSizeOfItemAtIndex(void);
void* FigBoxedMetadataGetTypeID(void);
void* FigBoxedMetadataGetValueOfItemAtIndex(void);
void* FigBoxedMetadataGetValueOfItemAtIndexAsCGAffineTransform(void);
void* FigBoxedMetadataGetValueOfItemAtIndexAsCGPoint(void);
void* FigBoxedMetadataGetValueOfItemAtIndexAsCGRect(void);
void* FigBoxedMetadataGetValueOfItemAtIndexAsCGSize(void);
void* FigBoxedMetadataGetValueOfItemAtIndexAsFloat32(void);
void* FigBoxedMetadataGetValueOfItemAtIndexAsFloat64(void);
void* FigBoxedMetadataGetValueOfItemAtIndexAsSInt16(void);
void* FigBoxedMetadataGetValueOfItemAtIndexAsSInt32(void);
void* FigBoxedMetadataGetValueOfItemAtIndexAsSInt64(void);
void* FigBoxedMetadataGetValueOfItemAtIndexAsSInt8(void);
void* FigBoxedMetadataGetValueOfItemAtIndexAsUInt16(void);
void* FigBoxedMetadataGetValueOfItemAtIndexAsUInt32(void);
void* FigBoxedMetadataGetValueOfItemAtIndexAsUInt64(void);
void* FigBoxedMetadataGetValueOfItemAtIndexAsUInt8(void);
void* FigBoxedMetadataIsUnderConstruction(void);
void* FigBoxedMetadataRelease(void);
void* FigBoxedMetadataRetain(void);
void* FigBufferQueueDequeueIfMatchingAndRetain(void);
void* FigBufferQueueInstallTriggerWithTimeAndIntegerThresholds(void);
void* FigBufferQueueRelease(void);
void* FigBufferQueueRetain(void);
void* FigByteStreamCopyMD5Digest(void);
void* FigByteStreamCopySHA1Digest(void);
void* FigByteStreamCreateForBlockBuffer(void);
void* FigByteStreamCreateForFile(void);
void* FigByteStreamCreateForFileURL(void);
void* FigByteStreamCreateFromOpenFile(void);
void* FigByteStreamCreateWithCFData(void);
void* FigByteStreamCreateWithIOSurface(void);
void* FigByteStreamCreateWithWriteCallback(void);
void* FigByteStreamCreateWritableWithCFMutableData(void);
void* FigByteStreamCreateWritableWithIOSurface(void);
void* FigByteStreamProviderCreateForBaseURLWithSecurityOptions(void);
void* FigByteStreamProviderGetClassID(void);
void* FigByteStreamProviderGetFigBaseObject(void);
void* FigByteStreamProviderGetTypeID(void);
void* FigByteStreamStatsCreateStatsDictionary(void);
void* FigByteStreamStatsLogOneRead(void);
void* FigByteStreamStatsSetupWorker(void);
void* FigByteStreamStatsTeardownWorker(void);
void* FigCFArrayAppendCFIndex(void);
void* FigCFArrayAppendCGFloat(void);
void* FigCFArrayAppendCGRect(void);
void* FigCFArrayAppendCGSize(void);
void* FigCFArrayAppendCMTime(void);
void* FigCFArrayAppendDouble(void);
void* FigCFArrayAppendFloat(void);
void* FigCFArrayAppendFloat32(void);
void* FigCFArrayAppendInt(void);
void* FigCFArrayAppendInt16(void);
void* FigCFArrayAppendInt32(void);
void* FigCFArrayAppendInt64(void);
void* FigCFArrayApplyFunction(void);
void* FigCFArrayContainsValue(void);
void* FigCFArrayCreateConcatenationOfTwoArrays(void);
void* FigCFArrayCreateMutableCopy(void);
void* FigCFArrayForEach2(void);
void* FigCFArrayGetCFIndexAtIndex(void);
void* FigCFArrayGetCGFloatAtIndex(void);
void* FigCFArrayGetCGRectAtIndex(void);
void* FigCFArrayGetCGSizeAtIndex(void);
void* FigCFArrayGetCMTimeAtIndex(void);
void* FigCFArrayGetCount(void);
void* FigCFArrayGetDoubleAtIndex(void);
void* FigCFArrayGetFloat32AtIndex(void);
void* FigCFArrayGetFloatAtIndex(void);
void* FigCFArrayGetInt16AtIndex(void);
void* FigCFArrayGetInt32AtIndex(void);
void* FigCFArrayGetInt64AtIndex(void);
void* FigCFArrayGetIntAtIndex(void);
void* FigCFAttributedStringSetDouble(void);
void* FigCFBundleIDResourceSubdirExists(void);
void* FigCFCopyCompactDescription(void);
void* FigCFCreateCombinedDictionary(void);
void* FigCFCreateExtendedDictionary(void);
void* FigCFCreatePropertyListFromBundleIdentifier(void);
void* FigCFCreatePropertyListFromBundleIdentifierOnPlatform(void);
void* FigCFDateCreateFromString(void);
void* FigCFDictionaryAddEntriesToDictionaryWithRecursion(void);
void* FigCFDictionaryCopyArrayOfKeys(void);
void* FigCFDictionaryCopyArrayOfValues(void);
void* FigCFDictionaryCreateMappedArray(void);
void* FigCFDictionaryCreateMutableCopy(void);
void* FigCFDictionaryGetBooleanIfPresent(void);
void* FigCFDictionaryGetCFIndexIfPresent(void);
void* FigCFDictionaryGetCGFloatIfPresent(void);
void* FigCFDictionaryGetCGRectIfPresent(void);
void* FigCFDictionaryGetCGSizeIfPresent(void);
void* FigCFDictionaryGetCMTimeIfPresent(void);
void* FigCFDictionaryGetCount(void);
void* FigCFDictionaryGetDoubleIfPresent(void);
void* FigCFDictionaryGetFloat32IfPresent(void);
void* FigCFDictionaryGetFloatIfPresent(void);
void* FigCFDictionaryGetInt16IfPresent(void);
void* FigCFDictionaryGetInt32IfPresent(void);
void* FigCFDictionaryGetInt64IfPresent(void);
void* FigCFDictionaryGetIntIfPresent(void);
void* FigCFDictionaryGetValueForCaseInsensitiveKeyIfPresent(void);
void* FigCFDictionarySetBase64Data(void);
void* FigCFDictionarySetCFIndex(void);
void* FigCFDictionarySetCGFloat(void);
void* FigCFDictionarySetCGRect(void);
void* FigCFDictionarySetCGSize(void);
void* FigCFDictionarySetCMTime(void);
void* FigCFDictionarySetDouble(void);
void* FigCFDictionarySetFloat(void);
void* FigCFDictionarySetFloat32(void);
void* FigCFDictionarySetInt(void);
void* FigCFDictionarySetInt16(void);
void* FigCFDictionarySetInt32(void);
void* FigCFDictionarySetInt64(void);
void* FigCFDictionarySetValue(void);
void* FigCFDictionarySetValueFromKeyInDict(void);
void* FigCFEqual(void);
void* FigCFGetLocalTimeString(void);
void* FigCFIOKitObjectCreate(void);
void* FigCFIOKitObjectGetIOKitObject(void);
void* FigCFIOKitObjectGetTypeID(void);
void* FigCFLocaleCreateWithMovieLangCode(void);
void* FigCFNumberCreateFloat32(void);
void* FigCFNumberCreateFloat64(void);
void* FigCFNumberCreateSInt16(void);
void* FigCFNumberCreateSInt32(void);
void* FigCFNumberCreateSInt64(void);
void* FigCFNumberCreateSInt8(void);
void* FigCFNumberCreateUInt16(void);
void* FigCFNumberCreateUInt32(void);
void* FigCFNumberCreateUInt64(void);
void* FigCFNumberCreateUInt8(void);
void* FigCFParseISO8601Date(void);
void* FigCFPropertyListCreateFromFigFileFork(void);
void* FigCFPropertyListWriteToFigFileFork(void);
void* FigCFRangeEqual(void);
void* FigCFRangeGetLimit(void);
void* FigCFStringCreateWithBytesAndMovieLangCode(void);
void* FigCFStringCreateWithBytesWithUnknownEncoding(void);
void* FigCFStringCreateWithJSONArray(void);
void* FigCFStringCreateWithJSONDictionary(void);
void* FigCFStringFind(void);
void* FigCFStringGetCStringPtrAndBufferToFree(void);
void* FigCFStringGetCStringPtrMaybeUsingPreallocatedBuffer(void);
void* FigCFStringGetOSTypeValue(void);
void* FigCFURLCopyCanonicalPath(void);
void* FigCFURLCreateCacheKey(void);
void* FigCFURLCreateDirectory(void);
void* FigCFURLCreateRelativeURLWithURLAndBaseURL(void);
void* FigCFURLDoesDirectoryExist(void);
void* FigCFURLGetFileStats(void);
void* FigCFURLIsLocalResource(void);
void* FigCFWeakReferenceDestroy(void);
void* FigCFWeakReferenceHolderCopyReferencedObject(void);
void* FigCFWeakReferenceHolderCreateWithReferencedObject(void);
void* FigCFWeakReferenceHolderGetTypeID(void);
void* FigCFWeakReferenceInit(void);
void* FigCFWeakReferenceLoadAndRetain(void);
void* FigCFWeakReferenceStore(void);
void* FigCFWeakReferenceTableAddValueAndGetKey(void);
void* FigCFWeakReferenceTableAddValueAssociatedWithKey(void);
void* FigCFWeakReferenceTableApplyFunction(void);
void* FigCFWeakReferenceTableCopyValue(void);
void* FigCFWeakReferenceTableCreate(void);
void* FigCFWeakReferenceTableGetKey(void);
void* FigCFWeakReferenceTableGetTypeID(void);
void* FigCFWeakReferenceTableRemoveValue(void);
void* FigCPECryptorGetClassID(void);
void* FigCPECryptorGetNotificationCenter(void);
void* FigCPECryptorGetTypeID(void);
void* FigCaptionDataCopySubrange(void);
void* FigCaptionDataCreate(void);
void* FigCaptionDataCreateMutable(void);
void* FigCaptionDataCreateMutableCopy(void);
void* FigCaptionDataGetCMBaseObject(void);
void* FigCaptionDataGetClassID(void);
void* FigCaptionDataGetTypeID(void);
void* FigCaptionDynamicStyleAddKeyFrameValue(void);
void* FigCaptionDynamicStyleCopyKeyFrameValueAtIndex(void);
void* FigCaptionDynamicStyleCreate(void);
void* FigCaptionDynamicStyleCreateMutable(void);
void* FigCaptionDynamicStyleGetInitialValue(void);
void* FigCaptionDynamicStyleGetKeyFrameCount(void);
void* FigCaptionDynamicStyleGetTypeID(void);
void* FigCaptionFontFamilyNameListAppend(void);
void* FigCaptionFontFamilyNameListCopyFamilyKindAndNameAtIndex(void);
void* FigCaptionFontFamilyNameListCreateMutable(void);
void* FigCaptionFontFamilyNameListCreateMutableCopy(void);
void* FigCaptionFontFamilyNameListGetCount(void);
void* FigCaptionFontFamilyNameListGetTypeID(void);
void* FigCaptionGeometryCopyCellBasedDimensionAsDictionary(void);
void* FigCaptionGeometryCopyCellBasedPointAsDictionary(void);
void* FigCaptionGeometryCopyCellBasedSizeAsDictionary(void);
void* FigCaptionGeometryGetCellBasedDimensionFromDictionary(void);
void* FigCaptionGeometryGetCellBasedPointFromDictionary(void);
void* FigCaptionGeometryGetCellBasedSizeFromDictionary(void);
void* FigCaptionGroupCreate(void);
void* FigCaptionGroupCreateEmpty(void);
void* FigCaptionGroupFormatDescriptionCreate(void);
void* FigCaptionGroupGetCaptionData(void);
void* FigCaptionGroupGetDurationAfterSlice(void);
void* FigCaptionGroupGetDurationBeforeSlice(void);
void* FigCaptionGroupGetSliceCount(void);
void* FigCaptionGroupGetTypeID(void);
void* FigCaptionRegionCreate(void);
void* FigCaptionRegionCreateMutable(void);
void* FigCaptionRegionCreateMutableCopy(void);
void* FigCaptionRegionGetCMBaseObject(void);
void* FigCaptionRegionGetClassID(void);
void* FigCaptionRegionGetTypeID(void);
void* FigCaptionTextOutlineCreate(void);
void* FigCaptionTextOutlineGetColor(void);
void* FigCaptionTextOutlineGetThickness(void);
void* FigCaptionTextOutlineGetTypeID(void);
void* FigCheckIsCurrentDispatchQueue(void);
void* FigCheckIsNotCurrentDispatchQueue(void);
void* FigClockConvertHostTimeToSystemUnits(void);
void* FigClockGetAnchorTime(void);
void* FigClockGetHostTimeClock(void);
void* FigClockGetTime(void);
void* FigClockGetTypeID(void);
void* FigClockInvalidate(void);
void* FigClockMakeHostTimeFromSystemUnits(void);
void* FigClockMightDrift(void);
void* FigClockRelease(void);
void* FigClockRetain(void);
void* FigCompositeReadByteStreamCreate(void);
void* FigConcurrentAccessDetectorBeginReading(void);
void* FigConcurrentAccessDetectorBeginWriting(void);
void* FigConcurrentAccessDetectorCreate(void);
void* FigConcurrentAccessDetectorDestroy(void);
void* FigConcurrentAccessDetectorEndReading(void);
void* FigConcurrentAccessDetectorEndWriting(void);
void* FigConditionVariableBroadcast(void);
void* FigConditionVariableCreate(void);
void* FigConditionVariableDestroy(void);
void* FigConditionVariableWaitRelative(void);
void* FigCopyBacktrace(void);
void* FigCopyCFPreferenceAppValueOrOptionCFTypeWithDefault(void);
void* FigCopyRankedLanguagesAccordingToPreferredLanguages(void);
void* FigCreateBase32EncodedStringFromBytes(void);
void* FigCreateBase64EncodedStringFromBytes(void);
void* FigCreateBlockBufferCopyingMemoryBlock(void);
void* FigCreateBlockBufferWithCFDataNoCopy(void);
void* FigCreateBlockBufferWithCFString(void);
void* FigCreateBytesFromCFString(void);
void* FigCreateBytesFromCFStringAndMovieLangCode(void);
void* FigCreateCFArrayFromColorValues(void);
void* FigCreateCFDataFromCFPropertyList(void);
void* FigCreateCFDataWithBlockBufferNoCopy(void);
void* FigCreateCFPropertyListFromData(void);
void* FigCreateCFURLFromAliasRecordBytes(void);
void* FigCustomURLHandlerGetCMBaseObject(void);
void* FigCustomURLHandlerGetClassID(void);
void* FigCustomURLHandlerGetTypeID(void);
void* FigCustomURLLoaderCreate(void);
void* FigCustomURLLoaderGetCFTypeID(void);
void* FigCustomURLLoaderGetCMBaseObject(void);
void* FigCustomURLLoaderGetClassID(void);
void* FigCustomURLProviderGetCFTypeID(void);
void* FigCustomURLProviderGetClassID(void);
void* FigCustomURLProviderGetFigBaseObject(void);
void* FigCustomURLProviderNewRequestID(void);
void* FigCustomURLProviderRelease(void);
void* FigCustomURLProviderRetain(void);
void* FigCustomURLRequestInfoCopyAcceptEncoding(void);
void* FigCustomURLRequestInfoCopyAllowedUniversalTypeIdentifiers(void);
void* FigCustomURLRequestInfoCopyCryptor(void);
void* FigCustomURLRequestInfoCopyHTTPHeaders(void);
void* FigCustomURLRequestInfoCopyNSURLAuthenticationChallenge(void);
void* FigCustomURLRequestInfoCopyURL(void);
void* FigCustomURLRequestInfoCopyUserAgent(void);
void* FigCustomURLRequestInfoCreateMutable(void);
void* FigCustomURLRequestInfoCreateMutableCopy(void);
void* FigCustomURLRequestInfoGetByteRange(void);
void* FigCustomURLRequestInfoGetIsRenewalRequest(void);
void* FigCustomURLRequestInfoSetAcceptEncoding(void);
void* FigCustomURLRequestInfoSetAllowedUniversalTypeIdentifiers(void);
void* FigCustomURLRequestInfoSetByteRange(void);
void* FigCustomURLRequestInfoSetCryptor(void);
void* FigCustomURLRequestInfoSetHTTPHeaders(void);
void* FigCustomURLRequestInfoSetIsRenewalRequest(void);
void* FigCustomURLRequestInfoSetNSURLAuthenticationChallenge(void);
void* FigCustomURLRequestInfoSetUserAgent(void);
void* FigCustomURLResponseInfoCopyContentRenewalDate(void);
void* FigCustomURLResponseInfoCopyFinalURL(void);
void* FigCustomURLResponseInfoCopyHTTPHeaders(void);
void* FigCustomURLResponseInfoCopyNSURLCredential(void);
void* FigCustomURLResponseInfoCopyRedirectLocation(void);
void* FigCustomURLResponseInfoCopyRequestInfo(void);
void* FigCustomURLResponseInfoCopyUniversalTypeIdentifier(void);
void* FigCustomURLResponseInfoCreate(void);
void* FigCustomURLResponseInfoCreateMutable(void);
void* FigCustomURLResponseInfoCreateMutableCopy(void);
void* FigCustomURLResponseInfoGetContentLength(void);
void* FigCustomURLResponseInfoGetHTTPStatusCode(void);
void* FigCustomURLResponseInfoGetIsByteRangeAccessSupported(void);
void* FigCustomURLResponseInfoGetIsCachingDisabled(void);
void* FigCustomURLResponseInfoGetNSURLSessionAuthChallengeDisposition(void);
void* FigCustomURLResponseInfoGetResourceSize(void);
void* FigCustomURLResponseInfoSetAllValuesFromResponseInfo(void);
void* FigCustomURLResponseInfoSetContentLength(void);
void* FigCustomURLResponseInfoSetContentRenewalDate(void);
void* FigCustomURLResponseInfoSetFinalURL(void);
void* FigCustomURLResponseInfoSetHTTPHeaders(void);
void* FigCustomURLResponseInfoSetHTTPStatusCode(void);
void* FigCustomURLResponseInfoSetIsByteRangeAccessSupported(void);
void* FigCustomURLResponseInfoSetIsCachingDisabled(void);
void* FigCustomURLResponseInfoSetNSURLCredential(void);
void* FigCustomURLResponseInfoSetNSURLSessionAuthChallengeDisposition(void);
void* FigCustomURLResponseInfoSetRedirectLocation(void);
void* FigCustomURLResponseInfoSetResourceSize(void);
void* FigCustomURLResponseInfoSetUniversalTypeIdentifier(void);
void* FigDebugAssert(void);
void* FigDebugAssert2(void);
void* FigDebugAssertSyslog(void);
void* FigDebugAssertSyslog2(void);
void* FigDebugGetAdoptedVoucherProcessIDAndUUIDString(void);
void* FigDebugSettingGetKeyAsBoolean(void);
void* FigDebugSettingGetKeyAsInteger(void);
void* FigDeferNotificationToDispatchQueue(void);
void* FigDeferNotificationToRunLoop(void);
void* FigDepthBlurEffectRenderingParametersV1FromCFData(void);
void* FigDepthBytesPerPixelForDepthFormat(void);
void* FigDepthConvertBuffer(void);
void* FigDepthConvertRotationAndMirroringToExifOrientation(void);
void* FigDepthConvertToRGBA(void);
void* FigDepthDataGetCurrentMajorVersion(void);
void* FigDepthFormatIs16Bit(void);
void* FigDepthFormatIs32Bit(void);
void* FigDepthFormatIsDepth(void);
void* FigDepthFormatIsDisparity(void);
void* FigDepthFormatIsFixed16(void);
void* FigDepthRotateBuffer(void);
void* FigDepthRotateCalibrationData(void);
void* FigDepthRotateMetadataDictionary(void);
void* FigDepthScaleBuffer(void);
void* FigDerivedClockCreateWithGetTimeCallback(void);
void* FigDerivedClockDiscontinuityOccurred(void);
void* FigDerivedClockGetDerivedStorage(void);
void* FigDerivedClockVerifyCallbacksMatch(void);
void* FigDerivedFormatDescriptionCreate(void);
void* FigDerivedFormatDescriptionGetDerivedStorage(void);
void* FigDerivedFormatDescriptionRegister(void);
void* FigDerivedObjectCreate(void);
void* FigDigestMD5AppendData(void);
void* FigDigestMD5Create(void);
void* FigDigestMD5Destroy(void);
void* FigDigestMD5GetDigest(void);
void* FigDigestMD5Reset(void);
void* FigDigestSHA1AppendData(void);
void* FigDigestSHA1Create(void);
void* FigDigestSHA1Destroy(void);
void* FigDigestSHA1GetDigest(void);
void* FigDigestSHA1Reset(void);
void* FigDispatchAsyncAndWait(void);
void* FigDispatchAsyncAndWaitWithTimeout_f(void);
void* FigDispatchAsyncAndWait_f(void);
void* FigDispatchAsyncPostNotification(void);
void* FigDispatchAsyncSetPropertyImplementation(void);
void* FigDispatchCreateDispatchSourceBlock(void);
void* FigDispatchOnceInitWithinObject(void);
void* FigDispatchQueueCreateWithPriority(void);
void* FigDispatchQueueCreateWithPriorityAndClientPID(void);
void* FigDispatchQueueSetPriorityAndClientPID(void);
void* FigDispatchSyncCopyPropertyImplementation(void);
void* FigDoesBigEndianSoundDescriptionRequireSampleTableLie(void);
void* FigEndianClosedCaptionDescriptionData_BtoN(void);
void* FigEndianClosedCaptionDescriptionData_NtoB(void);
void* FigEndianImageDescriptionData_BtoN(void);
void* FigEndianImageDescriptionData_NtoB(void);
void* FigEndianMetadataDescriptionData_BtoN(void);
void* FigEndianMetadataDescriptionData_NtoB(void);
void* FigEndianSoundDescriptionData_BtoN(void);
void* FigEndianSoundDescriptionData_NtoB(void);
void* FigEndianTextDescriptionData_BtoN(void);
void* FigEndianTextDescriptionData_NtoB(void);
void* FigEndianTimeCodeDescriptionData_BtoN(void);
void* FigEndianTimeCodeDescriptionData_NtoB(void);
void* FigEndpointActivate(void);
void* FigEndpointActivateSync(void);
void* FigEndpointAggregateGetCMBaseObject(void);
void* FigEndpointAggregateGetClassID(void);
void* FigEndpointAggregateGetFigEndpoint(void);
void* FigEndpointAudioGroupXPCRemoteCreate(void);
void* FigEndpointAudioSourceGetCMBaseObject(void);
void* FigEndpointAudioSourceGetClassID(void);
void* FigEndpointAudioSourceGetTypeID(void);
void* FigEndpointCopyActiveCarPlayEndpoint(void);
void* FigEndpointCopyActiveEndpointOfType(void);
void* FigEndpointCopyFirstStreamOfType(void);
void* FigEndpointCopyStreamsForTypeAndSubType(void);
void* FigEndpointDeactivate(void);
void* FigEndpointEnsureAuthorizedSync(void);
void* FigEndpointExtendedGetClassID(void);
void* FigEndpointExtendedGetFigEndpoint(void);
void* FigEndpointGetCMBaseObject(void);
void* FigEndpointGetClassID(void);
void* FigEndpointGetSupportedFeatures(void);
void* FigEndpointGetTypeID(void);
void* FigEndpointGroupStartServer(void);
void* FigEndpointGroupXPCRemoteGetObjectID(void);
void* FigEndpointIsCarPlayActive(void);
void* FigEndpointManagerCopyActivatedEndpoints(void);
void* FigEndpointManagerCopyAirPlayManager(void);
void* FigEndpointManagerCopyEndpointForID(void);
void* FigEndpointManagerCopyEndpointForName(void);
void* FigEndpointManagerCopyEndpointsForType(void);
void* FigEndpointManagerGetCMBaseObject(void);
void* FigEndpointManagerGetClassID(void);
void* FigEndpointManagerGetTypeID(void);
void* FigEndpointManagerRemoteCopyAirPlayManager(void);
void* FigEndpointManagerStartServer(void);
void* FigEndpointMessengerGetClassID(void);
void* FigEndpointMessengerGetTypeID(void);
void* FigEndpointMessengerStartServer(void);
void* FigEndpointMessengerXPCRemoteCreateWithObjectID(void);
void* FigEndpointPickerCreate(void);
void* FigEndpointPickerGetClassID(void);
void* FigEndpointPickerGetTypeID(void);
void* FigEndpointPickerManagerGetSharedManager(void);
void* FigEndpointPickerManagerRegisterEndpointManager(void);
void* FigEndpointPickerManagerStart(void);
void* FigEndpointPickerStartServer(void);
void* FigEndpointPickerXPCRemoteCreate(void);
void* FigEndpointPlaybackSessionGetCMBaseObject(void);
void* FigEndpointPlaybackSessionGetClassID(void);
void* FigEndpointPlaybackSessionGetTypeID(void);
void* FigEndpointPlaybackSessionStartServer(void);
void* FigEndpointRemoteControlGroupGetCMBaseObject(void);
void* FigEndpointRemoteControlGroupGetClassID(void);
void* FigEndpointRemoteControlSessionGetCMBaseObject(void);
void* FigEndpointRemoteControlSessionGetClassID(void);
void* FigEndpointRemoteControlSessionGetTypeID(void);
void* FigEndpointRemoteControlSessionStartServer(void);
void* FigEndpointStartServer(void);
void* FigEndpointStreamAirPlayGetClassID(void);
void* FigEndpointStreamAirPlayGetFigEndpointStream(void);
void* FigEndpointStreamGetCMBaseObject(void);
void* FigEndpointStreamGetClassID(void);
void* FigEndpointStreamGetTypeID(void);
void* FigEndpointStreamResume(void);
void* FigEndpointStreamResumeSync(void);
void* FigEndpointStreamStartServer(void);
void* FigEndpointStreamSuspend(void);
void* FigEndpointStreamSuspendSync(void);
void* FigEndpointUIAgentCreate(void);
void* FigEndpointUIAgentGetClassID(void);
void* FigEndpointUIAgentGetTypeID(void);
void* FigEndpointUIAgentStartServer(void);
void* FigEndpointUIAgentXPCRemoteCreate(void);
void* FigEndpointUtility_EndpointPredicate_ContainsID(void);
void* FigEndpointUtility_EndpointPredicate_EqualsAudioStreamID(void);
void* FigEndpointXPCRemoteGetObjectID(void);
void* FigEventCreate(void);
void* FigEventDestroy(void);
void* FigEventReset(void);
void* FigEventSet(void);
void* FigEventWaitRelative(void);
void* FigFileDeleteDirectory(void);
void* FigFileDeleteFile(void);
void* FigFileDoesFileExist(void);
void* FigFileForkClose(void);
void* FigFileForkGetLengthAtOffset(void);
void* FigFileForkOpenMainByCFURL(void);
void* FigFileForkOpenMainByPath(void);
void* FigFileForkRead(void);
void* FigFileForkReadWithIOPolicy(void);
void* FigFileForkSynchronize(void);
void* FigFileForkTruncate(void);
void* FigFileForkWrite(void);
void* FigFileForkWriteWithIOPolicy(void);
void* FigFileGetDarwinFileDesc(void);
void* FigFileGetDarwinPath(void);
void* FigFileGetFileInfo(void);
void* FigFileGetStorageMediumForCFURL(void);
void* FigFileInfoEqual(void);
void* FigFilePathCreateFromChild(void);
void* FigFilePathCreateFromDarwinPath(void);
void* FigFilePathCreateFromNativePath(void);
void* FigFilePathCreateFromParent(void);
void* FigFilePathGetTypeID(void);
void* FigFileReadURLAndCreateCFData(void);
void* FigFileWrapDarwinFileDesc(void);
void* FigFloat16ConvertToFloat32(void);
void* FigFloat32ConvertToFloat16(void);
void* FigFormatDescriptionCopyAsBigEndianClosedCaptionDescriptionBlockBuffer(void);
void* FigFormatDescriptionCopyAsBigEndianMetadataDescriptionBlockBuffer(void);
void* FigFormatDescriptionCopyAsBigEndianTextDescriptionBlockBuffer(void);
void* FigFormatDescriptionCreateFromBigEndianClosedCaptionDescriptionBlockBuffer(void);
void* FigFormatDescriptionCreateFromBigEndianClosedCaptionDescriptionData(void);
void* FigFormatDescriptionCreateFromBigEndianMetadataDescriptionBlockBuffer(void);
void* FigFormatDescriptionCreateFromBigEndianMetadataDescriptionData(void);
void* FigFormatDescriptionCreateFromBigEndianTextDescriptionBlockBuffer(void);
void* FigFormatDescriptionCreateFromBigEndianTextDescriptionData(void);
void* FigFormatDescriptionExtensionsDictionariesEqualIgnoringKeys(void);
void* FigFormatDescriptionRelease(void);
void* FigFormatDescriptionRetain(void);
void* FigFoundationCreateHardLink(void);
void* FigGeometryAspectRatioCopyAsDictionary(void);
void* FigGeometryAspectRatioCopyDescription(void);
void* FigGeometryAspectRatioEqualToAspectRatio(void);
void* FigGeometryAspectRatioHash(void);
void* FigGeometryAspectRatioIsValid(void);
void* FigGeometryAspectRatioMake(void);
void* FigGeometryAspectRatioMakeFromDictionary(void);
void* FigGeometryCoordinateGravityTypeCopyAsCFType(void);
void* FigGeometryCoordinateGravityTypeCopyDescription(void);
void* FigGeometryCoordinateGravityTypeMakeFromCFType(void);
void* FigGeometryCoordinateSpaceCopyAsDictionary(void);
void* FigGeometryCoordinateSpaceCreate(void);
void* FigGeometryCoordinateSpaceGetTypeID(void);
void* FigGeometryCoordinateSpaceMakeFromDictionary(void);
void* FigGeometryDimensionCopyAsDictionary(void);
void* FigGeometryDimensionCopyDescription(void);
void* FigGeometryDimensionEqualToDimension(void);
void* FigGeometryDimensionGetCGFloat(void);
void* FigGeometryDimensionHash(void);
void* FigGeometryDimensionMake(void);
void* FigGeometryDimensionMakeFromDictionary(void);
void* FigGeometryDimensionMakeFromDimensionAndReferenceUnits(void);
void* FigGeometryDimensionMakeZeroedDimension(void);
void* FigGeometryMappingConvertDimensionToDimension(void);
void* FigGeometryMappingConvertPointToPoint(void);
void* FigGeometryMappingConvertRectToRect(void);
void* FigGeometryMappingConvertSizeToSize(void);
void* FigGeometryMappingConvertVectorToVector(void);
void* FigGeometryMappingCreate(void);
void* FigGeometryMappingCreateCEA608Mappings(void);
void* FigGeometryMappingCreateInverseMapping(void);
void* FigGeometryMappingGetDestinationUnits(void);
void* FigGeometryMappingGetSourceUnits(void);
void* FigGeometryMappingGetTypeID(void);
void* FigGeometryMarginsCopyAsDictionary(void);
void* FigGeometryMarginsCopyDescription(void);
void* FigGeometryMarginsEqualToMargins(void);
void* FigGeometryMarginsHash(void);
void* FigGeometryMarginsMake(void);
void* FigGeometryMarginsMakeFromDictionary(void);
void* FigGeometryPointCopyAsDictionary(void);
void* FigGeometryPointCopyDescription(void);
void* FigGeometryPointEqualToPoint(void);
void* FigGeometryPointGetCGPoint(void);
void* FigGeometryPointHash(void);
void* FigGeometryPointMake(void);
void* FigGeometryPointMakeFromCGPointAndReferenceUnits(void);
void* FigGeometryPointMakeFromDictionary(void);
void* FigGeometryPointMakeFromPointAndReferenceUnits(void);
void* FigGeometryPointMakeZeroedPoint(void);
void* FigGeometryRectCopyAsDictionary(void);
void* FigGeometryRectCopyDescription(void);
void* FigGeometryRectEqualToRect(void);
void* FigGeometryRectGetCGRect(void);
void* FigGeometryRectHash(void);
void* FigGeometryRectMake(void);
void* FigGeometryRectMakeFromCGRectAndReferenceUnits(void);
void* FigGeometryRectMakeFromDictionary(void);
void* FigGeometryRectMakeFromRectAndReferenceUnits(void);
void* FigGeometryRectMakeZeroedRect(void);
void* FigGeometrySizeCopyAsDictionary(void);
void* FigGeometrySizeCopyDescription(void);
void* FigGeometrySizeEqualToSize(void);
void* FigGeometrySizeGetCGSize(void);
void* FigGeometrySizeHash(void);
void* FigGeometrySizeMake(void);
void* FigGeometrySizeMakeFromCGSizeAndReferenceUnits(void);
void* FigGeometrySizeMakeFromDictionary(void);
void* FigGeometrySizeMakeFromSizeAndReferenceUnits(void);
void* FigGeometrySizeMakeZeroedSize(void);
void* FigGeometryVectorCopyAsDictionary(void);
void* FigGeometryVectorCopyDescription(void);
void* FigGeometryVectorEqualToVector(void);
void* FigGeometryVectorGetCGVector(void);
void* FigGeometryVectorHash(void);
void* FigGeometryVectorMake(void);
void* FigGeometryVectorMakeFromCGVectorAndReferenceUnits(void);
void* FigGeometryVectorMakeFromDictionary(void);
void* FigGeometryVectorMakeFromVectorAndReferenceUnits(void);
void* FigGeometryVectorMakeZeroedVector(void);
void* FigGetBaseByteStreamProvider(void);
void* FigGetCFPreferenceDoubleWithDefault(void);
void* FigGetCFPreferenceNumberWithDefault(void);
void* FigGetCFPreferenceOrOptionDoubleWithDefault(void);
void* FigGetCFPreferenceOrOptionNumberWithDefault(void);
void* FigGetCFStringForOSTypeValue(void);
void* FigGetDefaultManagedFilePool(void);
void* FigGetDoubleFromCFTypeWithDefault(void);
void* FigGetErrorCount(void);
void* FigGetGlobalCFAllocatorFigMalloc(void);
void* FigGetHostTimeToNanosecondsScale(void);
void* FigGetNumberFromCFTypeWithDefault(void);
void* FigGetTimeOfDayClock(void);
void* FigGetUpTime(void);
void* FigGetUpTimeNanoseconds(void);
void* FigGzipCompressMemory(void);
void* FigGzipCreate(void);
void* FigGzipDecompressMemory(void);
void* FigGzipDispose(void);
void* FigGzipReset(void);
void* FigH264Bridge_CopyDataWithEmulationPreventionBytesRemoved(void);
void* FigH264Bridge_CreateHLSfMP4ParsingInfoFromAVCCData(void);
void* FigH264Bridge_GetH264ParameterSetAtIndex(void);
void* FigH264Bridge_GetInterlaceTypeFromSlice(void);
void* FigH264Bridge_GetNALUnitHeaderLengthFromAVCC(void);
void* FigH264Bridge_GetPPSFromAVCC(void);
void* FigH264Bridge_GetPPSSequenceID(void);
void* FigH264Bridge_GetPPSSequenceIDFromSlice(void);
void* FigH264Bridge_GetSPSAndPPSCountFromAVCC(void);
void* FigH264Bridge_GetSPSChromaFormatAndBitDepths(void);
void* FigH264Bridge_GetSPSFromAVCC(void);
void* FigH264Bridge_GetSPSIsInterlaced(void);
void* FigH264Bridge_GetSPSSequenceID(void);
void* FigH264Bridge_GetSPSWidthAndHeight(void);
void* FigH264Bridge_GetSPS_VUI_Framerate(void);
void* FigH264Bridge_GetSliceInformationFromSampleBuffer(void);
void* FigH264Bridge_HLSfMP4ParsingInfoDestroy(void);
void* FigH264Bridge_LocateSliceHeaderForHLSfMP4EncryptableNAL(void);
void* FigH264Bridge_MeasureSliceHeader(void);
void* FigHALAudioConfigChangeCloneRecord(void);
void* FigHALAudioConfigChangeCreateRecord(void);
void* FigHALAudioConfigChangeDisposeRecord(void);
void* FigHALAudioConfigChangeSendRequest(void);
void* FigHALAudioConfigChangeSendRequestWithCustomChangeRecord(void);
void* FigHALAudioCreateStandardPluginObject(void);
void* FigHALAudioCreateStandardPluginObjectWithSpecialInstantiator(void);
void* FigHALAudioDeviceGetClassID(void);
void* FigHALAudioObjectGetClassID(void);
void* FigHALAudioObjectMapperAddMapping(void);
void* FigHALAudioObjectMapperAddPluginObjectMapping(void);
void* FigHALAudioObjectMapperCopyObjectForID(void);
void* FigHALAudioObjectMapperCreate(void);
void* FigHALAudioObjectMapperDispose(void);
void* FigHALAudioObjectMapperRemoveMapping(void);
void* FigHALAudioPluginGetClassID(void);
void* FigHALAudioPropertySendChanges(void);
void* FigHALAudioPropertySendOneChange(void);
void* FigHALAudioPropertySendOneChangeAsync(void);
void* FigHALAudioStreamGetCMBaseObject(void);
void* FigHALAudioStreamGetClassID(void);
void* FigHALPluginDriverGetInterface(void);
void* FigHEVCBridge_CopyHEVCSEIPayloadData(void);
void* FigHEVCBridge_CreateHLSfMP4ParsingInfoFromHVCCData(void);
void* FigHEVCBridge_CreateHVCCFromHEVCParameterSets(void);
void* FigHEVCBridge_CreateUpdatedHVCCWithAdditionalHEVCParameterSets(void);
void* FigHEVCBridge_GetHEVCParameterSetAtIndex(void);
void* FigHEVCBridge_GetNALUnitHeader(void);
void* FigHEVCBridge_GetNALUnitHeaderLengthFromHVCC(void);
void* FigHEVCBridge_GetSPSBitDepths(void);
void* FigHEVCBridge_GetSPSChromaFormatAndBitDepths(void);
void* FigHEVCBridge_GetSPSIsInterlaced(void);
void* FigHEVCBridge_GetSPSIsScalingListPresent(void);
void* FigHEVCBridge_GetSPSProfileTierLevel(void);
void* FigHEVCBridge_HLSfMP4ParsingInfoDestroy(void);
void* FigHEVCBridge_LocateSliceHeaderForHLSfMP4EncryptableNAL(void);
void* FigHEVCBridge_MeasureSliceHeader(void);
void* FigHostTimeToNanoseconds(void);
void* FigInt64MulDiv(void);
void* FigIsItOKToLogURLs(void);
void* FigIsReferenceAllowedBySecurityPolicy(void);
void* FigJSONObjectCreateWithData(void);
void* FigKTraceInit(void);
void* FigLivePhotoMetadataComputeDeserializationSize(void);
void* FigLivePhotoMetadataComputeSerializationSize(void);
void* FigLivePhotoMetadataDeserializeIntoBuffer(void);
void* FigLogBacktrace(void);
void* FigLogBacktraceFrames(void);
void* FigMachPortReleaseReceiveRight_(void);
void* FigMachPortReleaseSendRight_(void);
void* FigMakeIOVecArrayWithBlockBuffer(void);
void* FigManagedFilePoolCreate(void);
void* FigManagedFilePoolCreateByteStreamForFile(void);
void* FigManagedFilePoolGetTypeID(void);
void* FigMemoryBarrier(void);
void* FigMetadataAppendMEBXKeyTableBox(void);
void* FigMetadataAppendMEBXLocalIDDependencyListBoxes(void);
void* FigMetadataAppendMEBXPrimaryLocalIDsBox(void);
void* FigMetadataCreateIdentifierForKeyAndOSTypeKeySpace(void);
void* FigMetadataFormatDescriptionCreateWithExtensions(void);
void* FigMetadataFormatDescriptionCreateWithKeysAndDependencies(void);
void* FigMetadataFormatDescriptionGetConformingDataTypesForLocalID(void);
void* FigMetadataFormatDescriptionGetDataTypeForLocalID(void);
void* FigMetadataFormatDescriptionGetFirstLocalIDForIdentifier(void);
void* FigMetadataFormatDescriptionGetIdentifierForLocalID(void);
void* FigMetadataFormatDescriptionGetLanguageTagForLocalID(void);
void* FigMetadataFormatDescriptionGetLocalIDForMetadataIdentifyingFactors(void);
void* FigMetadataFormatDescriptionGetQuickTimeWellKnownTypeForLocalID(void);
void* FigMetadataFormatDescriptionGetSetupDataForLocalID(void);
void* FigMetadataFormatDescriptionQuickTimeWellKnownTypeIsRecognized(void);
void* FigMetadataGetKeySpaceAsOSTypeFromIdentifier(void);
void* FigMetadataKeyGetDatatypeNamespaceUInt32(void);
void* FigMetadataKeyGetDatatypeUInt32(void);
void* FigMetadataKeyGetKeyNamespaceUInt32(void);
void* FigMetadataKeyGetLocalIDUInt32(void);
void* FigMetadataKeyGetUInt32(void);
void* FigMetadataUnboxMEBXKeyTableBox(void);
void* FigMetadataUnboxMEBXLocalIDDependencyListBoxes(void);
void* FigMetadataUnboxMEBXPrimaryLocalIDsBox(void);
void* FigNanosecondsToHostTime(void);
void* FigNote_ChangeValue(void);
void* FigNote_CopyAndClearNoteBBuf(void);
void* FigNote_CopyKeys(void);
void* FigNote_FlushRunningLogAndCopyURLContainingLogs(void);
void* FigNote_GetLogBuffer(void);
void* FigNote_GetValue(void);
void* FigNote_OneTimeInitializationForMediaServerd(void);
void* FigNote_RefreshControlPreferences(void);
void* FigNote_SetPreferences(void);
void* FigNotificationCenterAddListeners(void);
void* FigNotificationCenterAddWeakListener(void);
void* FigNotificationCenterAddWeakListeners(void);
void* FigNotificationCenterRemoveListeners(void);
void* FigNotificationCenterRemoveWeakListener(void);
void* FigNotificationCenterRemoveWeakListeners(void);
void* FigOSTransactionCreate(void);
void* FigPlaybackLogPowerEvent(void);
void* FigReadAheadByteStreamCreateForFile(void);
void* FigReadAheadByteStreamCreateForFileURL(void);
void* FigReadOnlyTimebaseSetTargetTimebase(void);
void* FigReadWriteLockCreate(void);
void* FigReadWriteLockDestroy(void);
void* FigReadWriteLockLockForRead(void);
void* FigReadWriteLockLockForWrite(void);
void* FigReadWriteLockUnlockForRead(void);
void* FigReadWriteLockUnlockForWrite(void);
void* FigReadWriteQueue_Create(void);
void* FigReadWriteQueue_Read(void);
void* FigReadWriteQueue_Write(void);
void* FigReadWriteQueue_Write_Async(void);
void* FigReentrantMutexCheckIsLockedOnThisThread(void);
void* FigReentrantMutexCheckIsNotLockedOnThisThread(void);
void* FigReentrantMutexCreate(void);
void* FigReentrantMutexDestroy(void);
void* FigReentrantMutexLock(void);
void* FigReentrantMutexTryLock(void);
void* FigReentrantMutexUnlock(void);
void* FigRegistryAddItem(void);
void* FigRegistryAddSearchPath(void);
void* FigRegistryAddSearchPathWithOptions(void);
void* FigRegistryCopyFilteredItemList(void);
void* FigRegistryCopyItemList(void);
void* FigRegistryCreate(void);
void* FigRegistryGetTypeID(void);
void* FigRegistryItemCopyBundle(void);
void* FigRegistryItemCopyDescription(void);
void* FigRegistryItemCopyMatchingInfo(void);
void* FigRegistryItemGetFactory(void);
void* FigRegistryItemGetTypeID(void);
void* FigRegistryRescan(void);
void* FigRegistrySetIORegistryEntryArray(void);
void* FigRemote_CreateCFTypeFromSerializedAtomDataBlockBuffer(void);
void* FigRemote_CreateFormatDescriptionArrayFromSerializedAtomData(void);
void* FigRemote_CreateFormatDescriptionFromSerializedAtomDataBlockBuffer(void);
void* FigRemote_CreateKeyValuePairFromSerializedAtomDataBlockBuffer(void);
void* FigRemote_CreatePixelBufferFromSerializedAtomDataBlockBuffer(void);
void* FigRemote_CreateSampleBufferFromSerializedAtomDataBlockBuffer(void);
void* FigRemote_CreateSerializedAtomDataBlockBufferForCFType(void);
void* FigRemote_CreateSerializedAtomDataBlockBufferForFormatDescription(void);
void* FigRemote_CreateSerializedAtomDataBlockBufferForKeyValuePair(void);
void* FigRemote_CreateSerializedAtomDataBlockBufferForPixelBuffer(void);
void* FigRemote_CreateSerializedAtomDataBlockBufferForSampleBuffer(void);
void* FigRemote_CreateSerializedAtomDataForFormatDescriptions(void);
void* FigReplaceStringWithURL(void);
void* FigReplaceURLWithString(void);
void* FigRetainProxyConditionVariableWaitRelative(void);
void* FigRetainProxyCreate(void);
void* FigRetainProxyGetLockCount(void);
void* FigRetainProxyGetOwner(void);
void* FigRetainProxyGetTypeID(void);
void* FigRetainProxyInvalidate(void);
void* FigRetainProxyIsInvalidated(void);
void* FigRetainProxyLockMutex(void);
void* FigRetainProxyRelease(void);
void* FigRetainProxyReleaseOwner(void);
void* FigRetainProxyRelock(void);
void* FigRetainProxyRetain(void);
void* FigRetainProxyRetainOwner(void);
void* FigRetainProxyTryLockMutex(void);
void* FigRetainProxyUnlockAll(void);
void* FigRetainProxyUnlockMutex(void);
void* FigRingBufferAppendValueAndEvictBuffer(void);
void* FigRingBufferCreate(void);
void* FigRingBufferFlush(void);
void* FigRingBufferGetCount(void);
void* FigRingBufferGetEntries(void);
void* FigRingBufferGetSize(void);
void* FigRingBufferRelease(void);
void* FigRouteDiscovererCreate(void);
void* FigRouteDiscovererGetClassID(void);
void* FigRouteDiscovererGetTypeID(void);
void* FigRouteDiscovererStartServer(void);
void* FigRouteDiscovererXPCRemoteCreate(void);
void* FigRoutingContextCopyContextForUUID(void);
void* FigRoutingContextCopySystemAudioContext(void);
void* FigRoutingContextCopySystemMirroringContext(void);
void* FigRoutingContextCopySystemMusicContext(void);
void* FigRoutingContextCopySystemRemotePoolContext(void);
void* FigRoutingContextCreateAudioContext(void);
void* FigRoutingContextCreateControlChannelOnlyContext(void);
void* FigRoutingContextCreatePerAppSecondDisplayContext(void);
void* FigRoutingContextCreateRemoteMusicControllerContext(void);
void* FigRoutingContextCreateVideoContext(void);
void* FigRoutingContextGetClassID(void);
void* FigRoutingContextGetTypeID(void);
void* FigRoutingContextRemoteCopyContextForUUID(void);
void* FigRoutingContextRemoteCopySystemAudioContext(void);
void* FigRoutingContextRemoteCopySystemMirroringContext(void);
void* FigRoutingContextRemoteCopySystemMusicContext(void);
void* FigRoutingContextRemoteCopySystemRemotePoolContext(void);
void* FigRoutingContextRemoteCreateAudioContext(void);
void* FigRoutingContextRemoteCreateControlChannelOnlyContext(void);
void* FigRoutingContextRemoteCreatePerAppSecondDisplayContext(void);
void* FigRoutingContextRemoteCreateRemoteMusicControllerContext(void);
void* FigRoutingContextRemoteCreateVideoContext(void);
void* FigRoutingContextStartServer(void);
void* FigRoutingCopyDisplayMenuVideoContext(void);
void* FigRoutingManagerInit(void);
void* FigRoutingRemoteCopyDisplayMenuVideoContext(void);
void* FigRunDeferredNotificationsOnCurrentRunLoop(void);
void* FigRuntimeGetAttachmentBearerCallbacksWithTypeID(void);
void* FigRuntimeRegisterAttachmentBearerWithTypeID(void);
void* FigRuntimeUnregisterAttachmentBearerWithTypeID(void);
void* FigSampleBufferCreateCopyWithNewFormatDescription(void);
void* FigSampleBufferCreateCopyWithNoData(void);
void* FigSampleBufferCreateForCaptionGroup(void);
void* FigSampleBufferGetCaptionGroup(void);
void* FigSampleBufferGetDecryptor(void);
void* FigSampleBufferRelease(void);
void* FigSampleBufferRetain(void);
void* FigSampleBufferSetDecryptor(void);
void* FigScheduledFileIOCloseForRead(void);
void* FigScheduledFileIOComputeBufferSpecs(void);
void* FigScheduledFileIOExpediteAllClientRequests(void);
void* FigScheduledFileIOFinish(void);
void* FigScheduledFileIOGetEOF(void);
void* FigScheduledFileIOOpenForRead(void);
void* FigScheduledFileIOOpenWithByteStreamForRead(void);
void* FigScheduledFileIORequestRead(void);
void* FigScheduledFileIOReschduleRequests(void);
void* FigScheduledIOCreateForReadingByteStream(void);
void* FigScheduledIOCreateForReadingFile(void);
void* FigScheduledIOGetClassID(void);
void* FigScheduledIOGetFigBaseObject(void);
void* FigScheduledIOGetTypeID(void);
void* FigSecCopyOutmostBundleSignedWithSameCertificateAsCodeAtURL(void);
void* FigSemaphoreCreate(void);
void* FigSemaphoreDestroy(void);
void* FigSemaphoreSignal(void);
void* FigSemaphoreWaitRelative(void);
void* FigSetItIsOKToLogURLs(void);
void* FigSignalErrorAt(void);
void* FigSignalErrorAt2(void);
void* FigSimpleMutexCheckIsLockedOnThisThread(void);
void* FigSimpleMutexCheckIsNotLockedOnThisThread(void);
void* FigSimpleMutexCreate(void);
void* FigSimpleMutexDestroy(void);
void* FigSimpleMutexLock(void);
void* FigSimpleMutexTryLock(void);
void* FigSimpleMutexUnlock(void);
void* FigSimpleQueueRelease(void);
void* FigSimpleQueueRetain(void);
void* FigSimpleQueueSetQueueIsFullErrorLoggingEnabled(void);
void* FigSyncConvertTime(void);
void* FigSyncGetNotificationCenter(void);
void* FigSyncGetRelativeRate(void);
void* FigSyncGetRelativeRateAndAnchorTime(void);
void* FigSyncGetTime(void);
void* FigSyncMightDrift(void);
void* FigTextMarkupAspectRatioCopyAsSimplifiedDictionary(void);
void* FigTextMarkupAspectRatioMakeFromSimplifiedDictionary(void);
void* FigTextMarkupCreateARGBColorArrayFromCGColor(void);
void* FigTextMarkupCreateBlackARGBColorArray(void);
void* FigTextMarkupCreateClearARGBColorArray(void);
void* FigTextMarkupCreateWhiteARGBColorArray(void);
void* FigTextMarkupDimensionCopyAsSimplifiedDictionary(void);
void* FigTextMarkupDimensionMakeFromSimplifiedDictionary(void);
void* FigTextMarkupMapGenericFontFamilyToMACaptionAppearanceFontStyle(void);
void* FigTextMarkupSizeCopyAsSimplifiedDictionary(void);
void* FigTextMarkupSizeMakeFromSimplifiedDictionary(void);
void* FigThreadAbort(void);
void* FigThreadAbortForTeardown(void);
void* FigThreadAbortQueue(void);
void* FigThreadAbortQueueForTeardown(void);
void* FigThreadAllocKey(void);
void* FigThreadCopyProperty(void);
void* FigThreadCreate(void);
void* FigThreadExit(void);
void* FigThreadGetCurrent(void);
void* FigThreadGetGlobalNetworkBufferingBackgroundThrottledRunloop(void);
void* FigThreadGetGlobalNetworkBufferingLowPriorityQueue(void);
void* FigThreadGetGlobalNetworkBufferingLowPriorityRunloop(void);
void* FigThreadGetGlobalNetworkBufferingQueue(void);
void* FigThreadGetGlobalNetworkBufferingRunloop(void);
void* FigThreadGetMachThreadPriorityValue(void);
void* FigThreadGetMaxLogicalCoreCount(void);
void* FigThreadGetPlatformID(void);
void* FigThreadGetValue(void);
void* FigThreadIsValid(void);
void* FigThreadJoin(void);
void* FigThreadMakeDispatchQueueAbortable(void);
void* FigThreadRegisterAbortAction(void);
void* FigThreadRunOnce(void);
void* FigThreadSetProperty(void);
void* FigThreadSetValue(void);
void* FigThreadUnregisterAbortAction(void);
void* FigTimeCodeFormatDescriptionCopyAsBigEndianTimeCodeDescriptionBlockBuffer(void);
void* FigTimeCodeFormatDescriptionCreateFromBigEndianTimeCodeDescriptionBlockBuffer(void);
void* FigTimeCodeFormatDescriptionCreateFromBigEndianTimeCodeDescriptionData(void);
void* FigTimebaseAddTimer(void);
void* FigTimebaseAddTimerDispatchSource(void);
void* FigTimebaseCreateWithMasterClock(void);
void* FigTimebaseCreateWithMasterTimebase(void);
void* FigTimebaseGetEffectiveRate(void);
void* FigTimebaseGetMaster(void);
void* FigTimebaseGetMasterClock(void);
void* FigTimebaseGetMasterTimebase(void);
void* FigTimebaseGetRate(void);
void* FigTimebaseGetTime(void);
void* FigTimebaseGetTimeAndRate(void);
void* FigTimebaseGetTimeWithTimeScale(void);
void* FigTimebaseGetTypeID(void);
void* FigTimebaseGetUltimateMasterClock(void);
void* FigTimebaseRelease(void);
void* FigTimebaseRemoveTimer(void);
void* FigTimebaseRemoveTimerDispatchSource(void);
void* FigTimebaseRetain(void);
void* FigTimebaseSetAnchorTime(void);
void* FigTimebaseSetMasterClock(void);
void* FigTimebaseSetMasterTimebase(void);
void* FigTimebaseSetRate(void);
void* FigTimebaseSetRateAndAnchorTime(void);
void* FigTimebaseSetTime(void);
void* FigTimebaseSetTimerDispatchSourceNextFireTime(void);
void* FigTimebaseSetTimerDispatchSourceToFireImmediately(void);
void* FigTimebaseSetTimerNextFireTime(void);
void* FigTimebaseSetTimerToFireImmediately(void);
void* FigTraceLoggingDumpToFile(void);
void* FigTraceLoggingEnd(void);
void* FigTraceLoggingPause(void);
void* FigTraceLoggingResume(void);
void* FigTraceLoggingStart(void);
void* FigTransportConnectToReceiver(void);
void* FigTransportConnectionGetCMBaseObject(void);
void* FigTransportConnectionGetClassID(void);
void* FigTransportConnectionGetTypeID(void);
void* FigTransportConnectionTCPCreate(void);
void* FigTransportConnectionUSBCreate(void);
void* FigTransportCopyRegisteredObject(void);
void* FigTransportCreateBBufFromPointer(void);
void* FigTransportCreateBBufFromRemoteObjectRef(void);
void* FigTransportCreateCFNumberFromLocalObjectRef(void);
void* FigTransportCreateCFNumberFromRemoteObjectRef(void);
void* FigTransportDisconnectFromReceiver(void);
void* FigTransportDiscoveryAddEventHandler(void);
void* FigTransportDiscoveryGetSharedDiscovery(void);
void* FigTransportDiscoveryGetTypeID(void);
void* FigTransportDiscoveryRemoveEventHandler(void);
void* FigTransportDiscoveryStart(void);
void* FigTransportDiscoveryStop(void);
void* FigTransportGetCMBaseObject(void);
void* FigTransportGetClassID(void);
void* FigTransportGetLocalObjectRefFromCFNumber(void);
void* FigTransportGetLocalRootObject(void);
void* FigTransportGetRemoteObjectRefFromBBuf(void);
void* FigTransportGetRemoteObjectRefFromCFNumber(void);
void* FigTransportGetRemoteRootObject(void);
void* FigTransportGetTypeID(void);
void* FigTransportInitialize(void);
void* FigTransportInitializeWithConnection(void);
void* FigTransportIsConnected(void);
void* FigTransportIsHiSpeed(void);
void* FigTransportPackageGetCMBaseObject(void);
void* FigTransportPackageGetClassID(void);
void* FigTransportPackageGetTypeID(void);
void* FigTransportParcelCreateBBufRepresentation(void);
void* FigTransportParcelFree(void);
void* FigTransportParcelGetBytes(void);
void* FigTransportParcelGetMessageData(void);
void* FigTransportParcelGetMessageType(void);
void* FigTransportParcelMake(void);
void* FigTransportParcelSetMessageData(void);
void* FigTransportParcelSetMessageType(void);
void* FigTransportRegisterObject(void);
void* FigTransportRegisterObjectWithFlags(void);
void* FigTransportSendAsyncMessage(void);
void* FigTransportSendSyncMessageCreatingReply(void);
void* FigTransportServiceGetCMBaseObject(void);
void* FigTransportServiceGetClassID(void);
void* FigTransportServiceGetTypeID(void);
void* FigTransportSessionGetCMBaseObject(void);
void* FigTransportSessionGetClassID(void);
void* FigTransportSessionGetTypeID(void);
void* FigTransportSetLocalVersion(void);
void* FigTransportSetSharedTransport(void);
void* FigTransportStartAcceptingConnections(void);
void* FigTransportStopAcceptingConnections(void);
void* FigTransportStreamGetCMBaseObject(void);
void* FigTransportStreamGetClassID(void);
void* FigTransportStreamGetTypeID(void);
void* FigTransportUninitialize(void);
void* FigTransportUnregisterObject(void);
void* FigUInt32NearestPowerOfTwo(void);
void* FigUInt64MulDiv(void);
void* FigUSleep(void);
void* FigUserBreak(void);
void* FigUserCrash(void);
void* FigVideoCreateBlockBufferAndFormatDescriptionForHoistingInStreamParameterSets(void);
void* FigVideoFormatDescriptionContainsWideColor(void);
void* FigVideoFormatDescriptionCopyAsBigEndianImageDescriptionBlockBuffer(void);
void* FigVideoFormatDescriptionCreateFromBigEndianImageDescriptionBlockBuffer(void);
void* FigVideoFormatDescriptionCreateFromBigEndianImageDescriptionData(void);
void* FigVideoFormatDescriptionCreateFromSPSAndPPS(void);
void* FigVideoFormatDescriptionCreateKeysCommonWithImageBuffers(void);
void* FigVideoFormatDescriptionCreateUpdatedFromHEVCParameterSets(void);
void* FigVideoFormatDescriptionCreateWithSampleDescriptionExtensionAtom(void);
void* FigVideoFormatDescriptionGetDimensions(void);
void* FigVolumeControllerCopySharedControllerRemote(void);
void* FigVolumeControllerGetCMBaseObject(void);
void* FigVolumeControllerGetClassID(void);
void* FigVolumeControllerGetLocalPlaybackVolume(void);
void* FigVolumeControllerGetTypeID(void);
void* FigVolumeControllerSetLocalPlaybackVolume(void);
void* FigVolumeControllerStartServer(void);
void* FigXPCConnectionCopyRemoteExecutableURL(void);
void* FigXPCConnectionHasEntitlement(void);
void* FigXPCCreateBasicMessage(void);
void* FigXPCEndpointGroupServerRetainEndpointGroupForID(void);
void* FigXPCEndpointServerRetainEndpointForID(void);
void* FigXPCHandleStdCopyPropertyMessage(void);
void* FigXPCHandleStdSetPropertyMessage(void);
void* FigXPCMessageCopyCFArray(void);
void* FigXPCMessageCopyCFData(void);
void* FigXPCMessageCopyCFDate(void);
void* FigXPCMessageCopyCFDictionary(void);
void* FigXPCMessageCopyCFObject(void);
void* FigXPCMessageCopyCFString(void);
void* FigXPCMessageCopyCFURL(void);
void* FigXPCMessageCopySenderExecutableURL(void);
void* FigXPCMessageCreateBlockBufferData(void);
void* FigXPCMessageCreateBlockBufferDataWithSize(void);
void* FigXPCMessageGetCMTime(void);
void* FigXPCMessageGetCMTimeMapping(void);
void* FigXPCMessageGetCMTimeRange(void);
void* FigXPCMessageGetOpCode(void);
void* FigXPCMessageSetAndConsumeVMData(void);
void* FigXPCMessageSetBlockBuffer(void);
void* FigXPCMessageSetCFArray(void);
void* FigXPCMessageSetCFData(void);
void* FigXPCMessageSetCFDate(void);
void* FigXPCMessageSetCFDictionary(void);
void* FigXPCMessageSetCFObject(void);
void* FigXPCMessageSetCFString(void);
void* FigXPCMessageSetCFURL(void);
void* FigXPCMessageSetCMTime(void);
void* FigXPCMessageSetCMTimeMapping(void);
void* FigXPCMessageSetCMTimeRange(void);
void* FigXPCMessageSetVMData(void);
void* FigXPCRelease(void);
void* FigXPCRemoteClientAssociateObject(void);
void* FigXPCRemoteClientCreate(void);
void* FigXPCRemoteClientCreateWithXPCEndpoint(void);
void* FigXPCRemoteClientCreateWithXPCService(void);
void* FigXPCRemoteClientDisassociateObject(void);
void* FigXPCRemoteClientDispose(void);
void* FigXPCRemoteClientGetServerPID(void);
void* FigXPCRemoteClientKillServerOnTimeout(void);
void* FigXPCRemoteClientLookupAndRetainAssociatedObject(void);
void* FigXPCRemoteClientRetainCopiedObject(void);
void* FigXPCRemoteClientSendAsyncMessage(void);
void* FigXPCRemoteClientSendSyncMessage(void);
void* FigXPCRemoteClientSendSyncMessageCreatingReply(void);
void* FigXPCRetain(void);
void* FigXPCSendStdCopyPropertyMessage(void);
void* FigXPCSendStdSetPropertyMessage(void);
void* FigXPCServerAssociateCopiedObjectWithConnection(void);
void* FigXPCServerAssociateCopiedObjectWithNeighborProcess(void);
void* FigXPCServerAssociateCopiedObjectWithNeighborProcessByPID(void);
void* FigXPCServerAssociateObjectWithConnection(void);
void* FigXPCServerAssociateObjectWithNeighborProcess(void);
void* FigXPCServerAssociateObjectWithNeighborProcessByPID(void);
void* FigXPCServerConfirmNeighborProcessByPID(void);
void* FigXPCServerCopyXPCEndpoint(void);
void* FigXPCServerDisassociateObjectWithConnection(void);
void* FigXPCServerDisassociateObjectWithNeighborClientConnection(void);
void* FigXPCServerDisassociateObjectWithNeighborClientPID(void);
void* FigXPCServerGetConnectionRefcon(void);
void* FigXPCServerLookupAndRetainAssociatedObject(void);
void* FigXPCServerRetainNeighborObjectFromID(void);
void* FigXPCServerRetainNeighborObjectFromIDWithConnection(void);
void* FigXPCServerRetainNeighborObjectFromIDWithProcessID(void);
void* FigXPCServerSetConnectionRefcon(void);
void* FigXPCServerStart(void);
void* FigXPCServerStartWithClientXPCConnection(void);
void* FigXPCServerStartWithNewXPCEndpoint(void);
void* H264Bridge_CopyDataWithEmulationPreventionBytesRemoved(void);
void* NeroTransportConnectToReceiver(void);
void* NeroTransportConnectionGetCMBaseObject(void);
void* NeroTransportConnectionGetClassID(void);
void* NeroTransportConnectionGetTypeID(void);
void* NeroTransportCopyRegisteredObject(void);
void* NeroTransportCreate(void);
void* NeroTransportDisconnectFromReceiver(void);
void* NeroTransportGetTypeID(void);
void* NeroTransportInvalidate(void);
void* NeroTransportIsConnected(void);
void* NeroTransportIsHiSpeed(void);
void* NeroTransportRegisterObject(void);
void* NeroTransportRegisterObjectWithFlags(void);
void* NeroTransportSendAsyncMessage(void);
void* NeroTransportSendSyncMessageCreatingReply(void);
void* NeroTransportStartAcceptingConnections(void);
void* NeroTransportStopAcceptingConnections(void);
void* NeroTransportUnregisterObject(void);
void* _FigIsCurrentDispatchQueue(void);
void* _FigIsNotCurrentDispatchQueue(void);
void* fig_get_epochTimeStamp(void);
void* fig_get_offsetTimeStamp(void);
void* fig_get_timestamp(void);
void* fig_log(void);
void* fig_logP(void);
void* fig_log_CF1(void);
void* fig_log_CF1P(void);
void* fig_log_CF2(void);
void* fig_log_handle(void);
void* fig_log_with_return_address(void);
void* fig_note_initialize_autolog_work(void);
void* fig_note_initialize_logging(void);
void* fig_note_initialize_timestamps(void);
void* fig_note_initialize_work(void);
void* fig_post_a_symptom_guts(void);

#endif
